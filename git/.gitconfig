# [user]
        email = example@aaa.com
        name = hiramiya523
[init]
        defaultBranch = main

[alias]
        alias = !sh -c 'git config --list | grep ^alias\\. '
        # alias = !"if test -z $1; then loop=; for k in `git config --get-regexp ^alias\\. | sort | sed -e 's/^alias\\.\\(\\S*\\).*/\\1/g'`; do echo -n $k; loop="${loop}1"; if test ${#loop} -lt 5; then echo -n '\t'; else echo; loop=; fi; done; exit; fi; git config --list | grep ^alias\\.$1= | sed -e s/^alias\\.//; exit;"
        ss = status
        ad = add
        cm = commit -m
        # 直前コミットの取り下げ(push前)
        # git reset --soft HEAD^

        co = checkout
        wip = !git add . && git commit -m 'wip' && git push
        sw = switch
        df = diff
        # pull => git fetch && git merge origin/hogeFuga
        pl = pull

        # push
        # - ローカルと、リモートブランチ名が異なる場合、
        # git push origin HEAD:feat-1.5-#31-pay-form


# remote
# git remote -v  オリジン確認s
        bc = branch
        # git branch -D hoge-branch 削除
        # git branch -vv  Upstream確認
        # git diff brancA branchB

        # 1. リモートbranchを持ってくる
        # git fetch origin hoge-branch 
        # 2. リモートbranchを取り込めているか確認
        # git branch -r
        # 3. git co -b hoge origin/hoge (git co -b hoge)
        # 4. 確認 git branch -vv

        # ローカルだけで作りたいときは、
        # git checkout -b hoge だけ

        # リモートになく、手元に残ったブランチをクリア
        # git fetch --prune

        #  rm cached
        # git rm -r --cached .

        # ローカルで作ったブランチを、リモートにプッシュ
        # 1. git checkout -b new-branch main
        # 3. git push -u origin new-branch

        # ブランチ名：変更
        # git branch -m old-name new-name

        # コミット数
        cnt = git rev-list --count

# ステージング取り消し
        # git reset HEAD // 全部

        # コミット取り消し
        #  git reset --soft HEAD^ // 直前のみ
        # コミット履歴ごと消せる
        #  git reset --herd {id}

        # パスワードをキャッシュを有効化する
        # git config --global credential.helper cache

        # 特定のコミットに戻す
        rv = git revert
        # ! 注意すべき点としてはマージした事実は消えないということです。 そのため、そのブランチを再度マージしたとしても、取り込みが発生しません。
        # ? その場合は新しくブランチを作成してマージするようにしましょう。 ワイ???複製したブランチからマージすればいいけるん？


        # リモートに間違ったマージコミットをpushしてしまった。ので削除したい。
        # git reset --hard HEAD~1 1こ前のコミットをクリア
        # 下記、--forceを入れないと、リモートが最新なのでpullしろと怒られた。pullしたら上記resetも戻される笑
        # git push origin 1.58-main --force 
        # !「コミットを取り消した」履歴も残らない.一度pushなどを行って、ほかの開発者に公開されているコミットを取り消すことは絶対にしてはいけません。

        # git reset --hard ORIG_HEAD
        # git reset --hard 戻りたいコミットID

        # stash
        st = stash
        sta = stash apply
        # git stash pop  -> apply&delete

        # git stash list
        # stash save "comment"
        # git stash clear // 全削除

        #  git diff stash@{0} //差分

        # specify file
        # usage: git stash push -m "stash name" -- filepath
        stf = stash push -- 


        # merge 関連
        mg = merge --no-commit --no-ff
        # - dry-runする
        # 1 コンフリクトするか確認できる
        # git merge --no-commit --no-ff <branch>
        # Note: ffは Fast Forward Merge、マージコミットを必ず残したい。追跡が容易になるので。
        
        # 2 取り消し
        # git merge --abort

        # 派生元確認
        # git show-branch | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -1 | awk -F'[]~^[]' '{print $2}'
